[{"body":"MARK is a simple domain specific language (DSL) that can be written in any text editor. We recommend however using the MARK IDE which brings syntax highlighting, auto-completion, and some other benefits that will support you in writing MARK rules.\nYou may choose from any of these ways to use MARK authoring support:\n A standalone Eclipse-based IDE An Eclipse plugin A language server (LSP) that can be integrated into VS Code, IntelliJ, and other IDEs  Standalone Eclipse IDE  Download the standalone Eclipse IDE from TODO. We provide versions for Windows, Mac, and Linux (each 64 bit).  Eclipse Plugin  In Eclipse, click on Help-\u0026gt;Install new software Add the update site: https://update.breakpoint-security.de Install (TODO: Name of product in eclipse update site)  Language Server  Download the language server as cross-platform Jar file from TODO Start the language server using the command java -jar TODO.jar -lsp In the IDE of your choice, install an LSP plugin if needed and connect to your language server. TODO  ","excerpt":"MARK is a simple domain specific language (DSL) that can be written in any text editor. We recommend …","ref":"/docs/mark-authors/installation/","title":"Installation"},{"body":"Install Analysis Server No matter whether you will use an IDE or the console, you first need to install the analysis server.\nPrerequisites\n Java 11 or higher  Download and Install\n Download the zipped analysis server from the release page Unzip the file Run the server.bat (Windows) or server.sh (Mac, Linux) script from the unzipped folder to start the analysis server The server will start in console mode and you should see the following banner TODO  Install Eclipse Plugin Codyze can be installed from the following Eclipse update site: https://breakpoint-security.de/update. It has been tested against Eclipse 2019-04 and later.\n Go to Windows-\u0026gt;Preferences-\u0026gt;CPG Analysis and configure the path the analysis server  If the configuration is correct, .java and .cpp files will be automatically scanned when they are saved. Any errors found by Codyze will be highlighted as problems. If Codyze verifies that an API is correctly used, it will create mark the line with a hint.  Install in Visual Studio TODO Wolfgang\n","excerpt":"Install Analysis Server No matter whether you will use an IDE or the console, you first need to …","ref":"/docs/developers/installation/","title":"Installation"},{"body":"Codyze is a static analysis tool to support developers in correctly using cryptographic libraries.\nCryptography is hard and implementing it correctly is even harder. Luckily, there are well-established and battle-proved libraries available that do the heavy lifting of efficient and side-channel resilient implementation of cryptographic primitives. But even when using these libraries in application code, developers run the risk of making subtle errors that may undermine the security of their application. This is where Codyze helps. It integrates into the IDE or CI pipeline, analyses source code and tells developers if they are using cryptographic libraries in a correct or in an insecure way.\nHow does it work? In contrast to many other static analysis tools, Codyze directly analyzes the source code and does not require a compiler toolchain. It can thus even analyse incomplete source code and tolerate small syntax errors.\nCodyze is based on a \u0026ldquo;Code Property Graph\u0026rdquo;, which represents the source code as a graph and adds semantic information to support the analysis. This representation can be used in two ways:\n as a fully automated tool, integrated into your CI or IDE as a database that can be manually explored using a simple query language  Why Codyze? Codyze checks source code for the correct usage of libraries. It is an addition to generic static analysis tools such as Sonarqube, Frama-C, or Checkerframework and specifically verifies that libraries are used as originally intended by their developers.\nLibrary developers write rules in a simple domain specific language, called MARK.\nDevelopers using the library verify their code against these rules using Codyze - either as an IDE-plugin or as a CI module.\nIntegrators of open source components may want to verify these components using the automated analyis of Codyze or by manually search the code for critical patterns, using the Crymlin query language.\nWhere should I go next?  MARK Authors: You are author of a cryptographic library? Start here to learn how to write MARK rules for your library. Developers: Learn how to use Codyze to check your application code Contributors: Start here to contribute to this documentation or to the project itself.  ","excerpt":"Codyze is a static analysis tool to support developers in correctly using cryptographic libraries. …","ref":"/docs/overview/","title":"Overview"},{"body":"MARK rules refer to entities - abstract objects that wrap the real object classes of the analyzed programming language. A MARK entity defines three parts:\n A name A set of ops (operations) A set of MARK variables  Choosing a name The name must reflect the fully qualified name of the class in the programing language.\nDefining Ops An op wraps one or more methods with same or similar behavior. MARK rules refer to ops instead of methods to abstract away overloaded methods and simplify rules.\nDefining variables Variables must be declared with the var keyword and may have a type. Rules use variables to refer to either method arguments or return values.\nExample  entity org.bouncycastle.crypto.digests.SHA512Digest isa org.bouncycastle.crypto.Digest { var instance : org.bouncycastle.crypto.digests.SHA512Digest; // Alternative for `this` var encodedState : byte[]; var copy : org.bouncycastle.crypto.digests.SHA512Digest; var inByte : byte; var inByteArray : byte[]; var inByteArrayOff : int; var inByteArraylen : int; var outArray : byte[]; var outArrayOff : int; var resultLen : int; op instantiate { this = org.bouncycastle.crypto.digests.SHA512Digest(); this = org.bouncycastle.crypto.digests.SHA512Digest(encodedState); instance = org.bouncycastle.crypto.digests.SHA512Digest(copy); } op update { org.bouncycastle.crypto.digests.SHA512Digest.update(inByte); org.bouncycastle.crypto.digests.SHA512Digest.update(inByteArray, inByteArrayOff, inByteArrayLen); } op finish { org.bouncycastle.crypto.digests.SHA512Digest.finish(); } op finalize { resultLen = org.bouncycastle.crypto.digests.SHA512Digest.doFinal(outArray, outArrayOff); } op reset { org.bouncycastle.crypto.digests.SHA512Digest.reset(); org.bouncycastle.crypto.digests.SHA512Digest.reset(_); } }   ","excerpt":"MARK rules refer to entities - abstract objects that wrap the real object classes of the analyzed …","ref":"/docs/mark-authors/define-entities/","title":"MARK Entities"},{"body":" This is a placeholder page that shows you how to use this template site.\n Information in this section helps your user try your project themselves.\n  What do your users need to do to start using your project? This could include downloading/installation instructions, including any prerequisites or system requirements.\n  Introductory “Hello World” example, if appropriate. More complex tutorials should live in the Tutorials section.\n  Consider using the headings below for your getting started page. You can delete any that are not applicable to your project.\nPrerequisites Are there any system requirements for using your project? What languages are supported (if any)? Do users need to already have any software or tools installed?\nInstallation Where can your user find your project code? How can they install it (binaries, installable package, build from source)? Are there multiple options/versions they can install and how should they choose the right one for them?\nSetup Is there any initial setup users need to do after installation to try your project?\nTry it out! Can your users test their installation, for example by running a commmand or deploying a Hello World example?\n","excerpt":"This is a placeholder page that shows you how to use this template site.\n Information in this …","ref":"/docs/mark-authors/","title":"Writing MARK Policies"},{"body":" This is a placeholder page. Replace it with your own content.\n Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Vape migas chillwave sriracha poutine try-hard distillery. Tattooed shabby chic small batch, pabst art party heirloom letterpress air plant pop-up. Sustainable chia skateboard art party banjo cardigan normcore affogato vexillologist quinoa meggings man bun master cleanse shoreditch readymade. Yuccie prism four dollar toast tbh cardigan iPhone, tumblr listicle live-edge VHS. Pug lyft normcore hot chicken biodiesel, actually keffiyeh thundercats photo booth pour-over twee fam food truck microdosing banh mi. Vice activated charcoal raclette unicorn live-edge post-ironic. Heirloom vexillologist coloring book, beard deep v letterpress echo park humblebrag tilde.\n90's four loko seitan photo booth gochujang freegan tumeric listicle fam ugh humblebrag. Bespoke leggings gastropub, biodiesel brunch pug fashion axe meh swag art party neutra deep v chia. Enamel pin fanny pack knausgaard tofu, artisan cronut hammock meditation occupy master cleanse chartreuse lumbersexual. Kombucha kogi viral truffaut synth distillery single-origin coffee ugh slow-carb marfa selfies. Pitchfork schlitz semiotics fanny pack, ugh artisan vegan vaporware hexagon. Polaroid fixie post-ironic venmo wolf ramps kale chips.\n There should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\n First Header 2 This is a normal paragraph following a header. Knausgaard kale chips snackwave microdosing cronut copper mug swag synth bitters letterpress glossier craft beer. Mumblecore bushwick authentic gochujang vegan chambray meditation jean shorts irony. Viral farm-to-table kale chips, pork belly palo santo distillery activated charcoal aesthetic jianbing air plant woke lomo VHS organic. Tattooed locavore succulents heirloom, small batch sriracha echo park DIY af. Shaman you probably haven't heard of them copper mug, crucifix green juice vape single-origin coffee brunch actually. Mustache etsy vexillologist raclette authentic fam. Tousled beard humblebrag asymmetrical. I love turkey, I love my job, I love my friends, I love Chardonnay!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nScenester tumeric pickled, authentic crucifix post-ironic fam freegan VHS pork belly 8-bit yuccie PBR\u0026amp;B. I love this life we live in.\nSecond Header 2  This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\n Header 3 This is a code block following a header. Next level leggings before they sold out, PBR\u0026amp;B church-key shaman echo park. Kale chips occupy godard whatever pop-up freegan pork belly selfies. Gastropub Belinda subway tile woke post-ironic seitan. Shabby chic man bun semiotics vape, chia messenger bag plaid cardigan.\nHeader 4  This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header.  Header 5  This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header.  Header 6    What Follows     A table A header   A table A header   A table A header     There's a horizontal rule above and below this.\n Here is an unordered list:\n Liverpool F.C. Chelsea F.C. Manchester United F.C.  And an ordered list:\n Michael Brecker Seamus Blake Branford Marsalis  And an unordered task list:\n Create a Hugo theme Add task lists to it Take a vacation  And a \u0026ldquo;mixed\u0026rdquo; task list:\n Pack bags ? Travel!  And a nested list:\n Jackson 5  Michael Tito Jackie Marlon Jermaine   TMNT  Leonardo Michelangelo Donatello Raphael    Definition lists can be used with Markdown syntax. Definition headers are bold.\n Name Godzilla Born 1952 Birthplace Japan Color Green   Tables should have bold headings and alternating shaded rows.\n   Artist Album Year     Michael Jackson Thriller 1982   Prince Purple Rain 1984   Beastie Boys License to Ill 1986    If a table is too wide, it should scroll horizontally.\n   Artist Album Year Label Awards Songs     Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026amp;B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin\u0026rsquo; Somethin\u0026rsquo;, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life   Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026amp;B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let's Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I'm a Star, Purple Rain   Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026amp; Stealin, The New Style, She's Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill     Code snippets like var foo = \u0026quot;bar\u0026quot;; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \u0026quot;bar\u0026quot;; bar := \u0026quot;foo\u0026quot;; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \u0026#34;bar\u0026#34;;` lexer := lexers.Get(\u0026#34;javascript\u0026#34;) iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\u0026#34;github\u0026#34;) formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026amp;buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\n   Language Code     Javascript var foo = \u0026quot;bar\u0026quot;;   Ruby foo = \u0026quot;bar\u0026quot;{     Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts  This is an alert.  Note This is an alert with a title.  Note This is an alert with a title and Markdown.  This is a successful alert.  This is a warning.  Warning This is a warning with a title.  Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Tilde photo booth wayfarers cliche lomo intelligentsia man braid kombucha vaporware farm-to-table mixtape portland. PBR\u0026amp;B pickled cornhole ugh try-hard ethical subway tile. Fixie paleo intelligentsia pabst. Ennui waistcoat vinyl gochujang. Poutine salvia authentic affogato, chambray lumbersexual shabby chic.\nContact Info Plaid hell of cred microdosing, succulents tilde pour-over. Offal shabby chic 3 wolf moon blue bottle raw denim normcore poutine pork belly.\nExternal Links Stumptown PBR\u0026amp;B keytar plaid street art, forage XOXO pitchfork selvage affogato green juice listicle pickled everyday carry hashtag. Organic sustainable letterpress sartorial scenester intelligentsia swag bushwick. Put a bird on it stumptown neutra locavore. IPhone typewriter messenger bag narwhal. Ennui cold-pressed seitan flannel keytar, single-origin coffee adaptogen occupy yuccie williamsburg chillwave shoreditch forage waistcoat.\nThis is the final element on the page and there should be no margin below this. ","excerpt":"This is a placeholder page. Replace it with your own content.\n Text can be bold, italic, or …","ref":"/docs/mark-authors/mark-authors/","title":"MARK Rules"},{"body":"","excerpt":"","ref":"/docs/developers/","title":"Developers"},{"body":" Codyze is open source and an ongoing effort to support developers and auditors in improving the quality of security-critical code. We welcome everybody to contribute to this project, be it fixing a typo in the documentation or implementing whole new language support and analysis modules.\nPlease note that parts of this Codyze are backed by research projects. If you plan to make larger contributions, please contact us upfront to align your plans with possibly ongoing projects.\n Contributing to this documentation This documentation lives in the same repository as the code and the idea is that both are always consistent. If you make changes in the code that affect the documentation, please update the documentation in the same pull request.\nTo extend or fix errors in this documentation, proceed as follows:\n Fork the Codyze repo on GitHub. Make your changes and send a pull request (PR). If you're not yet ready for a review, add \u0026ldquo;WIP\u0026rdquo; to the PR name to indicate it's a work in progress. (Don't add the Hugo property \u0026ldquo;draft = true\u0026rdquo; to the page front matter, because that prevents the auto-deployment of the content preview described in the next point.) Wait for the automated PR workflow to do some checks. When it's ready, you should see a comment like this: deploy/netlify — Deploy preview ready! Click Details to the right of \u0026ldquo;Deploy preview ready\u0026rdquo; to see a preview of your updates. Continue updating your doc and pushing your changes until you're happy with the content. When you're ready for a review, add a comment to the PR, and remove any \u0026ldquo;WIP\u0026rdquo; markers.  Previewing your changes locally If you want to run your own local Hugo server to preview your changes as you work:\n  Install Hugo and any other tools you need. You'll need at least Hugo version 0.45 (we recommend using the most recent available version), and it must be the extended version, which supports SCSS.\n  Fork the Codyze repo repo into your own project, then create a local copy using git clone. Don’t forget to use --recurse-submodules or you won’t pull down some of the code you need to generate a working site.\ngit clone --recurse-submodules --depth 1 https://github.com/google/docsy-example.git   Run hugo server in the site root directory. By default your site will be available at http://localhost:1313/. Now that you're serving your site locally, Hugo will watch for changes to the content and automatically refresh your site.\n  Continue with the usual GitHub workflow to edit files, commit them, push the changes up to your fork, and create a pull request.\n  Creating an issue If you've found a problem in the docs, but you're not sure how to fix it yourself, please create an issue in the Codyze repo and add the label documentation to it. You can also create an issue about a specific page by clicking the Create Issue button in the top right hand corner of the page.\nContributing to Codyze Opening an issue We welcome any bug reports! Please use the issue tracker only to report bugs or unexpected behavior. If you have general questions about the project or need help in setting it up, please reach out to us directly and do not the issue tracker.\nTo report a bug, make sure to include the following information:\n What have you done? Provide the minimal set of files needed to reproduce the bug. If we cannot reproduce it, it's not a bug. What outcome have you expected, what outcome did you get? Can you provide any hints on what might be the cause of the bug and how you think it should be fixed?  Contributing code For minor fixes please proceed as follows:\n Fork the Codyze repo on GitHub. Create a branch for your contribution. We recommend prefixing the branch name with fix- if you are providing a bug fix or feature- if you plan to add a feature. Make your changes and send a pull request (PR). Make sure to describe want you intend the code to do and refer to any issues your PR might address (using the notation #123) If you're not yet ready for a review, add \u0026ldquo;WIP\u0026rdquo; to the PR name to indicate it's a work in progress. Wait for the automated PR workflow to do some checks. Continue working on your PR by pushing further commits to your branch until you are satisfied When you're ready for a review, add a comment to the PR, and remove any \u0026ldquo;WIP\u0026rdquo; markers.  Useful resources  Docsy user guide: All about Docsy, the documentation template we use, including how it manages navigation, look and feel, and multi-language support. Hugo documentation: Comprehensive reference for Hugo. Github Hello World!: A basic introduction to GitHub concepts and workflow.  ","excerpt":"Codyze is open source and an ongoing effort to support developers and auditors in improving the …","ref":"/docs/contributors/","title":"Contributors"},{"body":"Cryptography is hard and implementing it correctly is even harder. Luckily, there are well-established and battle-proved libraries available that do the heavy lifting of efficient and side-channel resilient implementation of cryptographic primitives. But even when using these libraries in application code, developers run the risk of making subtle errors that may undermine the security of their application. This is where Codyze helps. It integrates into the IDE or CI pipeline, analyses source code and tells developers if they are using cryptographic libraries in a correct or in an insecure way.\nHow does it work? In contrast to many other static analysis tools, Codyze directly analyzes the source code and does not require a compiler toolchain. It can thus even analyse incomplete source code and tolerate small syntax errors.\nCodyze is based on a \u0026ldquo;Code Property Graph\u0026rdquo;, which represents the source code as a graph and adds semantic information to support the analysis. This representation can be used in two ways:\n as a fully automated tool, integrated into your CI or IDE as a database that can be manually explored using a simple query language  Why Codyze? Codyze checks source code for the correct usage of libraries. It is an addition to generic static analysis tools such as Sonarqube, Frama-C, or Checkerframework and specifically verifies that libraries are used as originally intended by their developers.\nLibrary developers write rules in a simple domain specific language, called MARK.\nDevelopers using the library verify their code against these rules using Codyze - either as an IDE-plugin or as a CI module.\nIntegrators of open source components may want to verify these components using the automated analyis of Codyze or by manually search the code for critical patterns, using the Crymlin query language.\n","excerpt":"Cryptography is hard and implementing it correctly is even harder. Luckily, there are …","ref":"/docs/","title":"Documentation"},{"body":"","excerpt":"","ref":"/index.json","title":""},{"body":"  #td-cover-block-0 { background-image: url(/featured-background_hu2f88d737ab3a9a131efa9117f08fffd8_430841_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/featured-background_hu2f88d737ab3a9a131efa9117f08fffd8_430841_1920x1080_fill_q75_catmullrom_top.jpg); } }  Codyze: Static Code Analysis Learn More   Download   Spotting flaws in Java and C++ code - automagically!\n\n        Codyze has been funded by the Bundesamt für Sicherheit in der Informationstechnik (BSI). The Code Property Graph project is funded by the Bavarian Ministry of Economic Affairs (StMWi).\n            Download Codyze and get started! Head to the release page and download the plugin for the IDE of your choice.\nWe support Eclipse, IntelliJ, VSCode, and Visual Studio Code on Windows, Mac, and Linux.\n   Contributions welcome! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\nRead more …\n   Follow us on Twitter! For announcement of latest features etc.\nRead more …\n    ","excerpt":"#td-cover-block-0 { background-image: …","ref":"/","title":"Codyze"},{"body":"","excerpt":"","ref":"/community/","title":"Community"},{"body":"","excerpt":"","ref":"/search/","title":"Search Results"}]