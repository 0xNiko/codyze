<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Codyze â€“ Documentation</title>
    <link>https://www.codyze.io/docs/</link>
    <description>Recent content in Documentation on Codyze</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://www.codyze.io/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Install MARK IDE</title>
      <link>https://www.codyze.io/docs/mark-authors/installation/</link>
      <pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.codyze.io/docs/mark-authors/installation/</guid>
      <description>
        
        
        &lt;p&gt;MARK is a simple domain specific language (DSL) that can be written in any text editor. We however recommend using the MARK Eclipse plugin which brings syntax highlighting, auto-completion, and some other benefits that will support you in writing MARK rules.&lt;/p&gt;
&lt;h2 id=&#34;install-the-mark-eclipse-plugin&#34;&gt;Install the MARK Eclipse Plugin&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In Eclipse, click on &lt;code&gt;Help&lt;/code&gt;-&amp;gt;&lt;code&gt;Install New Software...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add the update site: &lt;code&gt;https://codyze.s3.eu-central-1.amazonaws.com/codyze-mark-eclipse-plugin/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Install &lt;img src=&#34;https://www.codyze.io/img/eclipse-mark-plugin.png&#34; alt=&#34;Install Codyze MARK plugin&#34; class=&#34;mt-3 mb-3 border border-info rounded&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;start-writing-mark-policies&#34;&gt;Start writing MARK policies&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create a new project by clicking on &lt;code&gt;File&lt;/code&gt;-&amp;gt;&lt;code&gt;New&lt;/code&gt;-&amp;gt;&lt;code&gt;Project&lt;/code&gt;. The project type does not matter.&lt;/li&gt;
&lt;li&gt;Create a new file with the extension &lt;code&gt;.mark&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Confirm the dialog to configure Xtext for your project.&lt;/li&gt;
&lt;li&gt;Start writing &lt;a href=&#34;https://www.codyze.io/docs/mark-authors/define-entities/&#34;&gt;entities &lt;i class=&#34;fas fa-arrow-alt-circle-right&#34;&gt;&lt;/i&gt;&lt;/a&gt; and &lt;a href=&#34;https://www.codyze.io/docs/mark-authors/mark-authors/&#34;&gt;rules &lt;i class=&#34;fas fa-arrow-alt-circle-right&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You may include all entities and rules in a single MARK file or organize them in multiple files as you with. As long as all MARK files are located in the same folder, Codyze will load entities and rules from all files in that folder.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Build the project</title>
      <link>https://www.codyze.io/docs/contributors/code/</link>
      <pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.codyze.io/docs/contributors/code/</guid>
      <description>
        
        
        &lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Java (OpenJDK) 11 or later&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;check-out-build-and-extend-codyze&#34;&gt;Check out, build, and extend Codyze&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Fork the &lt;a href=&#34;https://github.com/Fraunhofer-AISEC/codyze&#34;&gt;Codyze repo&lt;/a&gt; on GitHub and clone it, including submodules:&lt;br&gt;&lt;code&gt;git clone --recurse-submodules git://github.com/&amp;lt;YOUR GITHUB&amp;gt;/codyze&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create a branch for your contribution. We recommend prefixing the branch name with &lt;code&gt;fix-&lt;/code&gt; if you are providing a bug fix or &lt;code&gt;feature-&lt;/code&gt; if you plan to add a feature:&lt;br&gt;&lt;code&gt;git checkout -b feature-MY_EPIC_FEATURE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make your changes and make sure that the project builds without errors, passes all tests, and is properly formatted:&lt;br&gt;&lt;code&gt;./gradlew clean spotlessApply build publishToMavenLocal installDist&lt;/code&gt;&lt;br&gt;
The purpose of these gradle tasks is as follows:
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;clean&lt;/em&gt; Removes previous build artifacts&lt;/li&gt;
&lt;li&gt;&lt;em&gt;spotlessApply&lt;/em&gt; Applies source code formatting with the settings in &lt;code&gt;formatter-settings.xml&lt;/code&gt;. If the code is not properly formatted the build server will reject it.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;build&lt;/em&gt; Builds the main artifact (the jar file containing Codyze)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;publishToMavenLocal&lt;/em&gt; (optional) publishes the build artifact to your local Maven repository so it is available as a dependency for other projects&lt;/li&gt;
&lt;li&gt;&lt;em&gt;installDist&lt;/em&gt; Create an executable script for Linux, Mac, and Windows in &lt;code&gt;build/install/codyze/bin&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When everything works, &lt;code&gt;git commit&lt;/code&gt; your changes and &lt;code&gt;git push&lt;/code&gt; them to Github, then create a pull request (PR). Make sure to describe want you intend the code to do and refer to any issues your PR might address (using the notation &lt;code&gt;#123&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;If you&amp;rsquo;re not yet ready for a review, add &amp;ldquo;WIP&amp;rdquo; to the PR name to indicate it&amp;rsquo;s a work in progress.&lt;/li&gt;
&lt;li&gt;Wait for the automated CI workflow to do some checks.&lt;/li&gt;
&lt;li&gt;Continue working on your PR by pushing further commits to your branch until you are satisfied&lt;/li&gt;
&lt;li&gt;When you&amp;rsquo;re ready for a review, add a comment to the PR, and remove any &amp;ldquo;WIP&amp;rdquo; markers.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;code-formatting&#34;&gt;Code formatting&lt;/h2&gt;
&lt;p&gt;Codyze uses the gradle &lt;em&gt;spotless&lt;/em&gt; plugin to format source code. You may import the code style definitions into your favorite IDE to apply it immediately.&lt;/p&gt;
&lt;h3 id=&#34;gradle&#34;&gt;Gradle&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Simply run &lt;code&gt;./gradlew spotlessApply&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;intellij&#34;&gt;IntelliJ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;In IntelliJ, open &lt;em&gt;Settings-&amp;gt;Editor-&amp;gt;Code Style-&amp;gt;Java&lt;/em&gt; and click on the cog icon.&lt;/li&gt;
&lt;li&gt;Choose &lt;em&gt;Import Scheme-&amp;gt;Eclipse XML Profile&lt;/em&gt; and select the file &lt;code&gt;formatter-settings.xml&lt;/code&gt; in the project&amp;rsquo;s root folder.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://www.codyze.io/img/intellij-formatter.png&#34; 
alt=&#34;Import code style formatter into IntelliJ&#34;
class=&#34;mt-3 mb-3 border border-info rounded&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;eclipse&#34;&gt;Eclipse&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;In Eclipse, open &lt;em&gt;Window-&amp;gt;Preferences-&amp;gt;Java-&amp;gt;Code Style-&amp;gt;Formatter&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;Import&lt;/em&gt; and select the file &lt;code&gt;formatter-settings.xml&lt;/code&gt; in the project&amp;rsquo;s root folder.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://www.codyze.io/img/eclipse-formatter.png&#34; 
alt=&#34;Import code style formatter into Eclipse&#34;
class=&#34;mt-3 mb-3 border border-info rounded&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Install Codyze</title>
      <link>https://www.codyze.io/docs/getting-started/installation/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.codyze.io/docs/getting-started/installation/</guid>
      <description>
        
        
        &lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Java 11 or higher&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pre-built-release&#34;&gt;Pre-built Release&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Download a zipped release of Codyze from our &lt;a href=&#34;https://github.com/Fraunhofer-AISEC/codyze/releases&#34;&gt;GitHub release page &lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Unzip the file&lt;/li&gt;
&lt;li&gt;Execute Codyze using &lt;code&gt;bin\codyze.bat&lt;/code&gt; (Windows) or &lt;code&gt;bin/codyze&lt;/code&gt; (Mac, Linux)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;docker&#34;&gt;Docker&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re also offering Codyze as a container image. You can find an image with the latest release in the &lt;a href=&#34;https://github.com/Fraunhofer-AISEC/codyze/pkgs/container/codyze&#34;&gt;project&amp;rsquo;s container registry &lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- TODO: add description of container --&gt;
&lt;h2 id=&#34;build-from-source&#34;&gt;Build from Source&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Clone the source code for Codyze from the &lt;a href=&#34;https://github.com/Fraunhofer-AISEC/codyze&#34;&gt;project&amp;rsquo;s GitHub repository &lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To build an executable version of Codyze, run &lt;code&gt;./gradlew installDist&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The executable Codyze installation is located under &lt;code&gt;build/install/codyze&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Configuration</title>
      <link>https://www.codyze.io/docs/getting-started/configuration/</link>
      <pubDate>Tue, 24 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.codyze.io/docs/getting-started/configuration/</guid>
      <description>
        
        
        &lt;p&gt;Codyze can be configured through command line options when starting codyze.&lt;/p&gt;
&lt;p&gt;The most important options are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the execution modes (&lt;code&gt;-c&lt;/code&gt;. &lt;code&gt;-l&lt;/code&gt; and &lt;code&gt;-t&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;the source path (&lt;code&gt;-s &amp;lt;sourcepath&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;the path to the MARK files (&lt;code&gt;-m &amp;lt;markpath&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another way for configuring Codyze is through a YAML configuration file. Use &lt;code&gt;--config&lt;/code&gt; to specify the path to the file.&lt;/p&gt;
&lt;p&gt;For more information about the configuration file and a complete list of all configurations, please refer to our &lt;a href=&#34;https://github.com/Fraunhofer-AISEC/codyze/wiki/Configuring-Codyze&#34;&gt;wiki page&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Using CLI mode</title>
      <link>https://www.codyze.io/docs/getting-started/cli/</link>
      <pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.codyze.io/docs/getting-started/cli/</guid>
      <description>
        
        
        &lt;h2 id=&#34;command-line-mode&#34;&gt;Command line mode&lt;/h2&gt;
&lt;p&gt;When running in command line interface (CLI) mode, Codyze can be used to automatically check a code base against a set of MARK rules.
A short exemplary call to start codyze in command line interface mode would be&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;./bin&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;codyze&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;sourcepath&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;./mark&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;o&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;outputpath&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;-c&lt;/code&gt; enters command line mode. It will parse all files given by the &lt;code&gt;-s&lt;/code&gt; argument, analyze them against the MARK policies given by &lt;code&gt;-m&lt;/code&gt;, and write the findings in JSON format to the file given by &lt;code&gt;-o&lt;/code&gt;. If &lt;code&gt;-&lt;/code&gt; is given as the output name, the results will be dumped to stdout.&lt;/p&gt;
&lt;p&gt;Note that line numbers of findings in JSON output start by 0.&lt;/p&gt;
&lt;h2 id=&#34;cicd-integration&#34;&gt;CI/CD Integration&lt;/h2&gt;
&lt;p&gt;The CLI mode is a perfect candidate for integration in CI/CD processes, such as GitHub Actions. The following file can be used as an example so set up a compliance check for Java-based applications using GitHub Actions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;on&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;push&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;env&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;CODYZE_VERSION&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;2.0.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;jobs&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;runs-on&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ubuntu-latest&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;steps&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;uses&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;actions/checkout@v3&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;uses&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;actions/setup-java@v3&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;with&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;distribution&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;zulu&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;java-version&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;11&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Install codyze&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;wget &amp;#34;https://github.com/Fraunhofer-AISEC/codyze/releases/download/v${CODYZE_VERSION}/codyze-${CODYZE_VERSION}.zip&amp;#34; &amp;amp;&amp;amp; unzip codyze-${CODYZE_VERSION}.zip&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Check compliance&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;codyze-${CODYZE_VERSION}/bin/codyze -c -o - -m codyze-${CODYZE_VERSION}/mark -s src/main/java&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: MARK Entities</title>
      <link>https://www.codyze.io/docs/mark-authors/define-entities/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.codyze.io/docs/mark-authors/define-entities/</guid>
      <description>
        
        
        &lt;p&gt;MARK rules refer to &lt;em&gt;entities&lt;/em&gt; - abstract objects that wrap the real object classes of the analyzed programming language (in case of object oriented languages) and group methods with similar semantics in so-called &lt;em&gt;op&lt;/em&gt;s. A MARK entity defines three parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A &lt;em&gt;name&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;A set of &lt;em&gt;op&lt;/em&gt;s (operations)&lt;/li&gt;
&lt;li&gt;A set of MARK &lt;em&gt;variables&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Writing MARK rules for a library requires a good understanding of the library API and its class hierarchy. We recommend the following approach to writing MARK entities.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Model relevant classes as MARK entities&lt;/li&gt;
&lt;li&gt;Define &lt;em&gt;op&lt;/em&gt;s and variables&lt;/li&gt;
&lt;li&gt;(Optionally) blacklist some &lt;em&gt;op&lt;/em&gt;s&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;model-relevant-classes-as-mark-entities&#34;&gt;Model relevant classes as MARK entities&lt;/h2&gt;
&lt;p&gt;It is certainly not necessary to model all classes of the software library as MARK entities. Rather, you need to identify those classes which hold relevant data or provide functions. Although in many cases, several classes of the programming language can be summarized in one abstract MARK entity, it might be easier to directly map classes to entities in the first iteration.&lt;/p&gt;
&lt;p&gt;The name of an entity can be freely chosen. If it refers to a specific class in the programming language, though, it might make sense to name them accordingly.&lt;/p&gt;
&lt;h2 id=&#34;define-ops-and-variables&#34;&gt;Define Ops and variables&lt;/h2&gt;
&lt;p&gt;The next step is to define &lt;em&gt;op&lt;/em&gt;s. An &lt;em&gt;op&lt;/em&gt; is a group of semantically equal or similar functions, methods, or constructors, given as fully qualified signatures. Especially overloaded functions with the same name but different parameters are candidates for being grouped in an &lt;em&gt;op&lt;/em&gt;. For cryptographic libraries, typical &lt;em&gt;op&lt;/em&gt;s are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;instantiate&lt;/code&gt; - a group of functions for instantiating a class or creating an object of a class&lt;/li&gt;
&lt;li&gt;&lt;code&gt;initialize&lt;/code&gt; - a group of functions that initialize a cryptographic algorithms, e.g. by setting a key or initialization vector&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update&lt;/code&gt; - a group of functions that process further data by a cryptographic algorithm&lt;/li&gt;
&lt;li&gt;&lt;code&gt;finalize&lt;/code&gt;- a group of functions that terminate a cryptographic algorithm&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reset&lt;/code&gt;- a group of functions that reset a cryptographic algorithm and make it ready for further processing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The name of an &lt;em&gt;op&lt;/em&gt; can be freely chosen. When specifying fully qualified function or method signatures in an &lt;em&gt;op&lt;/em&gt;, parameters are typed and can be &lt;em&gt;unnamed&lt;/em&gt; or &lt;em&gt;named&lt;/em&gt;. Unnamed parameters are indicated by the name &amp;ldquo;_&amp;rdquo; and do not play any role in the definition of rules. Named parameters refer to MARK variables and can be used when writing rules. We recommend to name only those parameters which are required in rules, as named parameters will increase the memory cost and runtime of the analysis.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; The following &lt;code&gt;op&lt;/code&gt; &lt;em&gt;instantiate&lt;/em&gt; refers to only a single Java method, called &lt;code&gt;de.example.Crypto.getInstance&lt;/code&gt;. Neither the return type, nor modifiers such as &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;static&lt;/code&gt;, &lt;code&gt;final&lt;/code&gt; etc. are given in MARK. The method signature contains one named parameter of type &lt;code&gt;java.lang.String&lt;/code&gt; and one unnamed parameter without type restriction. Note that the name of the parameter does not relate to the parameter name in the programming language, but rather to a MARK variable.&lt;/p&gt;
&lt;pre&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;op&lt;/span&gt; instantiate {
  de.example.Crypto.getInstance(
    algorithm : java.lang.String,    // Named typed parameter
    _                                // Unnamed untyped parameter
  );
}
&lt;/pre&gt;
&lt;p&gt;So, this MARK &lt;code&gt;op&lt;/code&gt; would include the following methods of a class &lt;code&gt;de.example.Crypto&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public static Crypto getInstance(String x, String y)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private void getInstance(String x, byte y)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It would however &lt;em&gt;not&lt;/em&gt; include a method &lt;code&gt;void getInstance(String x)&lt;/code&gt; (wrong number of parameters) or &lt;code&gt;getInstance(byte x, String y)&lt;/code&gt; (wrong type of 1st parameter).&lt;/p&gt;
&lt;p&gt;To make use of named parameters, they must additionally be declared as entity variables using the &lt;code&gt;var&lt;/code&gt; keyword:&lt;/p&gt;
&lt;pre&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;entity&lt;/span&gt; Crypto {

  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; algorithm;  // this makes parameter &#34;algorithm&#34; available when writing rules.

  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;op&lt;/span&gt; instantiate {
    de.example.Crypto.getInstance(
      algorithm : java.lang.String,    // Named typed parameter
      _                                // Unnamed untyped parameter
    );
  }
}
&lt;/pre&gt;
&lt;h2 id=&#34;optionally-blacklist-some-ops&#34;&gt;(Optionally) blacklist some Ops&lt;/h2&gt;
&lt;p&gt;In some cases, groups of functions or methods should not be used at all by a program. This applies e.g. to deprecated functions or functions that are known to be insecure. MARK provides a shortcut to mark any use of such functions as insecure: the &lt;code&gt;forbidden&lt;/code&gt; keyword.&lt;/p&gt;
&lt;pre&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;entity&lt;/span&gt; Crypto {

  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;op&lt;/span&gt; instantiate {
    de.example.Crypto.getInstance(
      algorithm : java.lang.String,    // Named typed parameter
      _                                // Unnamed untyped parameter
    );
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;forbidden&lt;/span&gt; de.example.Crypto.getInstanceDeprecated();  // Any use of this function will be flagged
  }
}
&lt;/pre&gt;
&lt;p&gt;Any occurrence of &lt;code&gt;getInstanceDeprecated()&lt;/code&gt; in the program will be marked as insecure, without further evaluation of rules. This is not only a shortcut, removing the need to write separate rules, but also a way to cut down analysis time, as Codyze does not need to find instances of the entity, but will rather indicate the error immediately when it sees a usage of the method.&lt;/p&gt;
&lt;h2 id=&#34;complete-example&#34;&gt;Complete Example&lt;/h2&gt;
&lt;pre&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;entity&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;org.bouncycastle.crypto.digests.SHA512Digest&lt;/span&gt; 
           &lt;span style=&#34;color:#c4a000&#34;&gt;isa org.bouncycastle.crypto.Digest&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
  
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; instance : org.bouncycastle.crypto.digests.SHA512Digest; // Alternative for `this`
  
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; encodedState : byte[];
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; copy : org.bouncycastle.crypto.digests.SHA512Digest;
  
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; inByte : byte;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; inByteArray : byte[];
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; inByteArrayOff : int;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; inByteArraylen : int;
  
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; outArray : byte[];
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; outArrayOff : int;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; resultLen : int;
  
  
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;op&lt;/span&gt; instantiate &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
        this = org.bouncycastle.crypto.digests.SHA512Digest();
        this = org.bouncycastle.crypto.digests.SHA512Digest(encodedState);
        instance = org.bouncycastle.crypto.digests.SHA512Digest(copy);
    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
  
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;op&lt;/span&gt; update &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
    org.bouncycastle.crypto.digests.SHA512Digest.update(inByte);
    org.bouncycastle.crypto.digests.SHA512Digest.update(inByteArray, inByteArrayOff, inByteArrayLen);
  &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
  
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;op&lt;/span&gt; finish &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
    org.bouncycastle.crypto.digests.SHA512Digest.finish();
  &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
  
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;op&lt;/span&gt; finalize &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
    resultLen = org.bouncycastle.crypto.digests.SHA512Digest.doFinal(outArray, outArrayOff);
  &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
  
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;op&lt;/span&gt; reset &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
    org.bouncycastle.crypto.digests.SHA512Digest.reset();
    org.bouncycastle.crypto.digests.SHA512Digest.reset(_);
  &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
  
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;blockquote&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Using plugins</title>
      <link>https://www.codyze.io/docs/getting-started/lsp/</link>
      <pubDate>Tue, 24 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.codyze.io/docs/getting-started/lsp/</guid>
      <description>
        
        
        &lt;p&gt;Codyze can be integrated into multiple IDEs to automatically scan your code for errors.&lt;/p&gt;
&lt;h2 id=&#34;integration-in-eclipse&#34;&gt;Integration in Eclipse&lt;/h2&gt;
&lt;p&gt;The Codyze plugin can be installed from an Eclipse update site. It has been tested against Eclipse 2019-12 and later.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In Eclipse, click on &lt;code&gt;Help&lt;/code&gt;-&amp;gt;&lt;code&gt;Install New Software...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Add...&lt;/code&gt; to add a new update site&lt;/li&gt;
&lt;li&gt;Choose a name and enter the location &lt;a href=&#34;https://codyze.s3.eu-central-1.amazonaws.com/codyze-eclipse-plugin/&#34;&gt;https://codyze.s3.eu-central-1.amazonaws.com/codyze-eclipse-plugin/&lt;/a&gt; (note that this is an Eclipse update site URL and not suited to open with a web browser)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://www.codyze.io/img/eclipse-update-site.png&#34; 
alt=&#34;Adding Eclipse Update Site&#34;
class=&#34;mt-3 mb-3 border border-info rounded&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Choose and install &lt;code&gt;Codyze Code Analyzer&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://www.codyze.io/img/eclipse-plugin-installation.png&#34; 
alt=&#34;Adding Eclipse Update Site&#34;
class=&#34;mt-3 mb-3 border border-info rounded&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once installed, configure the Eclipse plugin to use the local LSP server:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to &lt;em&gt;Windows-&amp;gt;Preferences-&amp;gt;Codyze Code Analysis&lt;/em&gt; and configure the path to the analysis server binary&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://www.codyze.io/img/eclipse-plugin-2.png&#34; 
alt=&#34;Configuring Eclipse Plugin&#34;
class=&#34;mt-3 mb-3 border border-info rounded&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;If the configuration is correct, &lt;code&gt;.java&lt;/code&gt; and &lt;code&gt;.cpp&lt;/code&gt; files will be automatically scanned when they are saved. Any errors found by Codyze will be highlighted as problems. If Codyze verifies that an API is correctly used, it will mark the line with a hint.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://www.codyze.io/img/eclipse-plugin-1.png&#34; 
alt=&#34;Configuring Eclipse Plugin&#34;
class=&#34;mt-3 mb-3 border border-info rounded&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;integration-in-intellij&#34;&gt;Integration in IntelliJ&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Download and install the &lt;code&gt;LSP Support&lt;/code&gt; plugin. Restart IntelliJ.&lt;/li&gt;
&lt;li&gt;Go to &lt;code&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Language Server Protocol&lt;/code&gt; -&amp;gt; &lt;code&gt;Server Definitions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add a new server definition of type &lt;code&gt;Executable&lt;/code&gt; for extension &lt;code&gt;java&lt;/code&gt; and navigate to your local &lt;code&gt;codyze-&amp;lt;version&amp;gt;/bin/codyze&lt;/code&gt; script.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://www.codyze.io/img/lsp-settings-intellij.png&#34; 
alt=&#34;IntelliJ LSP Settings&#34; 
class=&#34;mt-3 mb-3 border border-info rounded&#34;&gt;&lt;/p&gt;
&lt;p&gt;If everything works as intended, you should see a green circle in your IntelliJ status bar, indicating that the connection to the language server was successful.&lt;/p&gt;
&lt;h2 id=&#34;integration-in-visual-studio-2019&#34;&gt;Integration in Visual Studio 2019&lt;/h2&gt;
&lt;p&gt;The Codyze plugin can be installed from the Visual Studio 2019 Marketplace&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.codyze.io/img/vs-plugin.jpg&#34; 
alt=&#34;Installation from Visual Studio Market&#34; 
class=&#34;mt-3 mb-3 border border-info rounded&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you prefer installing the plugin from the release page, proceed as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download the zipped extension from the &lt;a href=&#34;https://github.com/Fraunhofer-AISEC/codyze-vs-plugin/releases&#34;&gt;release page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Unzip the file&lt;/li&gt;
&lt;li&gt;Double-click the VSIX-file to install the extension&lt;/li&gt;
&lt;li&gt;Launch Visual Studio&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;On startup, the plugin will ask you for the path to Codyze and to the mark files you want to use. If everythings checks out, the plugin will automatically start an instance of Codyze when a solution is opened. It will then scan &lt;code&gt;.cpp&lt;/code&gt; files when opened or saved and highlight potential problems.&lt;/p&gt;
&lt;p&gt;To adjust the path to Codyze, the mark files or change the command line arguments used for Codyze, in Visual Studio go to &lt;code&gt;Tools&lt;/code&gt; -&amp;gt; &lt;code&gt;Options...&lt;/code&gt; -&amp;gt; &lt;code&gt;Codyze Plugin&lt;/code&gt; -&amp;gt; &lt;code&gt;Codyze Settings&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;integration-in-visual-studio-code&#34;&gt;Integration in Visual Studio Code&lt;/h2&gt;
&lt;p&gt;We build a Visual Studio Code plugin of Codyze for every new version. You can download a bundled &lt;code&gt;*.vsix&lt;/code&gt; plugin from the &lt;a href=&#34;https://github.com/Fraunhofer-AISEC/codyze/releases&#34;&gt;release page of Codyze &lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;integration-through-lsp-mode&#34;&gt;Integration through LSP mode&lt;/h2&gt;
&lt;p&gt;Codyze offers an LSP mode. You can user the LSP mode to integrate Codyze into any IDE or text editor with support for LSP. You need to look up the recommended approach for your favorite IDE or text editor.&lt;/p&gt;
&lt;p&gt;Once you know, how to configure an LSP tool, you need to start Codyze in LSP mode, i.e. &lt;code&gt;codyze -l&lt;/code&gt;. Please refer to the &lt;a href=&#34;https://www.codyze.io/docs/getting-started/configuration/&#34;&gt;configuration page&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MARK Rules</title>
      <link>https://www.codyze.io/docs/mark-authors/mark-authors/</link>
      <pubDate>Wed, 05 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.codyze.io/docs/mark-authors/mark-authors/</guid>
      <description>
        
        
        &lt;p&gt;Once the core functions of a library have been modeled as MARK entities, you can start writing rules. MARK rules operate over instances of entities and define conditions which must apply to these instances. A MARK &amp;ldquo;instance&amp;rdquo; may correspond to an actual object in the program, but in the case of non-object oriented languages or static methods, it may simply be an abstract set of function calls and variables.&lt;/p&gt;
&lt;h3 id=&#34;basic-rule-structure&#34;&gt;Basic rule structure&lt;/h3&gt;
&lt;p&gt;MARK rules are structured as follows:&lt;/p&gt;
&lt;pre&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;rule&lt;/span&gt; MyRule {
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;using&lt;/span&gt;
    // instances go here
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;ensure&lt;/span&gt;
    // conditions go here
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;onfail&lt;/span&gt;
    // error message goes here
}
&lt;/pre&gt;
&lt;p&gt;Each rule has a name which must be unique across along all MARK files loaded into Codyze. The &lt;code&gt;using&lt;/code&gt; keyword starts the declaration of instances of MARK entities and the &lt;code&gt;ensure&lt;/code&gt; keyword starts the actual condition. If Codyze finds a violation of the condition in the program, it will issue a finding with the message indicated by the &lt;code&gt;onfail&lt;/code&gt; identifier.&lt;/p&gt;
&lt;p&gt;To illustrate the process of writing MARK rules, let us assume we want to ensure that the MARK entity &lt;code&gt;Crypto&lt;/code&gt; from the previous section uses either of the two cryptographic algorithms &lt;code&gt;Algo1&lt;/code&gt; or &lt;code&gt;Algo2&lt;/code&gt; and that the algorithm is initiated with a parameter which is longer than 16 bytes.&lt;/p&gt;
&lt;pre&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;rule&lt;/span&gt; ID_2 {
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;using&lt;/span&gt;
    Crypto &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;as&lt;/span&gt; c,                   // instance c of MARK entity Crypto
    CryptoParameter &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;as&lt;/span&gt; cp          // instance cp of MARK entity CryptoParameter
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;ensure&lt;/span&gt;
    _is(c.param, cp)               // variable c.param == cp
    &amp;&amp; _length(cp.rawData) &gt;= 16   // byte length of cp.rawData &gt;= 16
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;onfail&lt;/span&gt;
  // todo
}
&lt;/pre&gt;
&lt;h3 id=&#34;preconditions&#34;&gt;Preconditions&lt;/h3&gt;
&lt;p&gt;Some rules only apply if certain preconditions are fulfilled, i.e. such preconditions will be evaluated before the actual condition. If they fail, the main condition will not be evaluated and the rule will not return any result (i.e. it will neither confirm a valid program nor flag a wrong program). Preconditions follow the same syntax as the main condition, but are declared by the &lt;code&gt;when&lt;/code&gt; keyword.&lt;/p&gt;
&lt;pre&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;rule&lt;/span&gt; ID_2 {
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;using&lt;/span&gt;
    Crypto &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;as&lt;/span&gt; c,                   // instance c of MARK entity Crypto
    CryptoParameter &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;as&lt;/span&gt; cp          // instance cp of MARK entity CryptoParameter
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;when&lt;/span&gt;
    c.algorithm == &#34;Algo1&#34;         // rule is only relevant for &#34;Algo1&#34;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;ensure&lt;/span&gt;
    _is(c.param, cp)               // variable c.param == cp
    &amp;&amp; _length(cp.rawData) &gt;= 16   // byte length of cp.rawData &gt;= 16
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;onfail&lt;/span&gt;
  // todo
}
&lt;/pre&gt;
&lt;h3 id=&#34;built-in-predicates&#34;&gt;Built-in Predicates&lt;/h3&gt;
&lt;p&gt;MARK comes with a number of built in functions that can be used as predicates in conditions and preconditions. These built-ins are called when MARK rules are evaluated and operate over their input arguments (typically MARK objects or constants) and the current evaluation context. By convention, built-ins should start with an underscore (&lt;code&gt;_&lt;/code&gt;). When a built-in fails, it will return an &lt;code&gt;Error&lt;/code&gt; object that always evaluates to &lt;em&gt;not applicable&lt;/em&gt;, i.e. neither true nor false.&lt;/p&gt;
&lt;h4 id=&#34;_between&#34;&gt;_between&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Function:&lt;/strong&gt; &lt;code&gt;_between(String str, String start, String end)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  ensure
     _between(&amp;#34;&amp;lt;09&amp;gt;&amp;#34;, &amp;#34;&amp;lt;&amp;#34;, &amp;#34;&amp;gt;&amp;#34;) == &amp;#34;09&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Returns the part of the string between &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; which both have to be part of the string. If &lt;code&gt;start&lt;/code&gt; or &lt;code&gt;end&lt;/code&gt; are not part of the string, this returns an &lt;code&gt;Error&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;_direct_eog_connection&#34;&gt;_direct_eog_connection&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Function:&lt;/strong&gt; &lt;code&gt;_direct_eog_connection(Node n1, Node n2)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  ensure
     _direct_eog_connection(n1, n2)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Checks if there is a &lt;em&gt;direct&lt;/em&gt; EOG-connection (i.e., without branches) between the two given vertices.&lt;/p&gt;
&lt;h4 id=&#34;_eog_connection&#34;&gt;_eog_connection&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Function:&lt;/strong&gt; &lt;code&gt;_eog_connection(Node n1, Node n2)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  ensure
     _eog_connection(n1, n2)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Checks if there is an arbitrary EOG-connection between the two given vertices.&lt;/p&gt;
&lt;h4 id=&#34;_get_code&#34;&gt;_get_code&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Function:&lt;/strong&gt; &lt;code&gt;_get_code(a)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;  TODO&lt;/p&gt;
&lt;p&gt;Returns the corresponding source code of MARK object &lt;code&gt;a&lt;/code&gt;. If this is not possible, this returns an &lt;code&gt;Error&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;_has_value&#34;&gt;_has_value&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Function:&lt;/strong&gt; &lt;code&gt;__has_value(a,b)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  ensure
     __has_value(a, b)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if MARK object &lt;code&gt;a&lt;/code&gt; may be assigned value &lt;code&gt;b&lt;/code&gt; (e.g., a constant).&lt;/p&gt;
&lt;h4 id=&#34;_inside_same_function&#34;&gt;_inside_same_function&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Function:&lt;/strong&gt; &lt;code&gt;__inside_same_function(a,b)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  ensure
     __inside_same_function(a, b)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if MARK objects &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; reside in the same function.&lt;/p&gt;
&lt;h4 id=&#34;_is&#34;&gt;_is&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Function:&lt;/strong&gt; &lt;code&gt;_is(a,b)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  ensure
     _is(a, b)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if MARK object &lt;code&gt;a&lt;/code&gt; is equal to variable &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;_is_instance&#34;&gt;_is_instance&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Function:&lt;/strong&gt; &lt;code&gt;_is_instance(a, String classname)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  ensure
     _is_instance(a, &amp;#34;java.lang.String&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if MARK object &lt;code&gt;a&lt;/code&gt; is an instance of &lt;code&gt;classname&lt;/code&gt;. &lt;code&gt;classname&lt;/code&gt; has to be the fully qualified name of the class.&lt;/p&gt;
&lt;h4 id=&#34;_length&#34;&gt;_length&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Function:&lt;/strong&gt; &lt;code&gt;_length(a)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  ensure
    _length(a) == 5 // e.g. for array declaration `new int[5]`
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Returns the length of MARK object &lt;code&gt;a&lt;/code&gt;. Currently, this can only return the dimension of an Java array.&lt;/p&gt;
&lt;h4 id=&#34;_now&#34;&gt;_now&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Function:&lt;/strong&gt; &lt;code&gt;_now()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  ensure
    _now() == 1653955200 // 2022-05-31T00:00:00Z
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Returns the current time as the number of seconds since epoch (1970-01-01T00:00:00Z). Relies on Java&amp;rsquo;s Instant.now().&lt;/p&gt;
&lt;h4 id=&#34;_receives_value_from&#34;&gt;_receives_value_from&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Function:&lt;/strong&gt; &lt;code&gt;_receives_value_from(a,b)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  ensure
     _receives_value_from(a, b)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt;, if there is a data flow from &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;_split&#34;&gt;_split&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Function:&lt;/strong&gt; &lt;code&gt;_split(String str, String splitter, int position)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  ensure
     _split(&amp;#34;ASD/EFG/JKL&amp;#34;, &amp;#34;/&amp;#34;, 1) == &amp;#34;EFG&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Behaves like the Java expression &lt;code&gt;String.split(String splitter)[position]&lt;/code&gt;. That is, it splits the string &lt;code&gt;str&lt;/code&gt; at all occurrences of &lt;code&gt;splitter&lt;/code&gt; and returns the &lt;code&gt;position&lt;/code&gt;th substring. Returns an &lt;code&gt;Error&lt;/code&gt; if no such occurrence is found.&lt;/p&gt;
&lt;h4 id=&#34;_split_disjoint&#34;&gt;_split_disjoint&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Function:&lt;/strong&gt; &lt;code&gt;_split_disjoint(String str, String splitter, List set)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  ensure
     _split_disjoint(&amp;#34;ASD/EFG/JKL&amp;#34;, &amp;#34;/&amp;#34;, [&amp;#34;ABC&amp;#34;, &amp;#34;EFG&amp;#34;, &amp;#34;JKL&amp;#34;])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Splits &lt;code&gt;str&lt;/code&gt; at all occurrences of &lt;code&gt;splitter&lt;/code&gt; and checks, if any of the resulting elements is part of the provided set. Returns an &lt;code&gt;Error&lt;/code&gt; if no occurrence of &lt;code&gt;split&lt;/code&gt; is found.&lt;/p&gt;
&lt;h4 id=&#34;_split_match_unordered&#34;&gt;_split_match_unordered&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Function:&lt;/strong&gt; &lt;code&gt;_split_match_unordered(String str, String splitter, List set, Boolean strict)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  ensure
     _split_match_unordered(&amp;#34;ASD/EFG/JKL&amp;#34;, &amp;#34;/&amp;#34;, [&amp;#34;ASD&amp;#34;, &amp;#34;EFG&amp;#34;, &amp;#34;JKL&amp;#34;], true)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Splits &lt;code&gt;str&lt;/code&gt; at all occurrences of &lt;code&gt;splitter&lt;/code&gt; and checks, if resulting elements are part of the provided set. The optional parameter &lt;code&gt;strict&lt;/code&gt; controls if the set resulting from splitting should be identical to the provided set. Returns an &lt;code&gt;Error&lt;/code&gt; if no occurrence of &lt;code&gt;split&lt;/code&gt; is found.&lt;/p&gt;
&lt;h4 id=&#34;_starts_with&#34;&gt;_starts_with&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Function:&lt;/strong&gt; &lt;code&gt;_starts_with(String str, String start)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  ensure
     _starts_with(&amp;#34;ASDEFGJKL&amp;#34;, &amp;#34;ASD&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;str&lt;/code&gt; starts with &lt;code&gt;start&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;_year&#34;&gt;_year&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Function:&lt;/strong&gt; &lt;code&gt;_year(Int time)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  ensure
    _year(1653955200) == 2022 // 2022-05-31T00:00:00Z
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Returns the year in which &lt;code&gt;time&lt;/code&gt; is in. &lt;code&gt;time&lt;/code&gt; represents the number of seconds since epoch (1970-01-01T00:00:00Z).&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
