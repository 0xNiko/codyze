<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Codyze – Documentation</title>
    <link>https://www.codyze.io/docs/</link>
    <description>Recent content in Documentation on Codyze</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://www.codyze.io/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Install MARK IDE</title>
      <link>https://www.codyze.io/docs/mark-authors/installation/</link>
      <pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.codyze.io/docs/mark-authors/installation/</guid>
      <description>
        
        
        &lt;p&gt;MARK is a simple domain specific language (DSL) that can be written in any text editor. We recommend however using the MARK Eclipse plugin which brings syntax highlighting, auto-completion, and some other benefits that will support you in writing MARK rules.&lt;/p&gt;
&lt;h2 id=&#34;install-the-mark-eclipse-plugin&#34;&gt;Install the MARK Eclipse Plugin&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In Eclipse, click on &lt;code&gt;Help&lt;/code&gt;-&amp;gt;&lt;code&gt;Install new software&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add the update site: &lt;code&gt;https://update.breakpoint-security.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Install (TODO: Name of product in eclipse update site)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;start-writing-mark-policies&#34;&gt;Start writing MARK policies&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create a new project by clicking on &lt;code&gt;New&lt;/code&gt;-&amp;gt;&lt;code&gt;Project&lt;/code&gt;. The project type does not matter.&lt;/li&gt;
&lt;li&gt;Create a new file with the extension &lt;code&gt;.mark&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start writing entities and rules. You may include all entities and rules in a single MARK file or organize them in multiple files as you with. As long as all MARK files are located in the same folder, Codyze will load entities and rules from all files in that folder.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Build the project</title>
      <link>https://www.codyze.io/docs/contributors/code/</link>
      <pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.codyze.io/docs/contributors/code/</guid>
      <description>
        
        
        &lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Java (OpenJDK) 11 or later&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;check-out-build-and-extend-codyze&#34;&gt;Check out, build, and extend Codyze&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Fork the &lt;a href=&#34;https://github.com/Fraunhofer-AISEC/codyze&#34;&gt;Codyze repo&lt;/a&gt; on GitHub and clone it, including submodules:&lt;br&gt;&lt;code&gt;git clone --recurse-submodules git://github.com/&amp;lt;YOUR GITHUB&amp;gt;/codyze&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create a branch for your contribution. We recommend prefixing the branch name with &lt;code&gt;fix-&lt;/code&gt; if you are providing a bug fix or &lt;code&gt;feature-&lt;/code&gt; if you plan to add a feature:&lt;br&gt;&lt;code&gt;git checkout -b feature-MY_EPIC_FEATURE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make your changes and make sure that the project builds without errors, passes all tests, and is properly formatted:&lt;br&gt;&lt;code&gt;./gradlew clean spotlessApply build publishToMavenLocal installDist&lt;/code&gt;&lt;br&gt;
The purpose of these gradle tasks is as follows:
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;clean&lt;/em&gt; Removes previous build artifacts&lt;/li&gt;
&lt;li&gt;&lt;em&gt;spotlessApply&lt;/em&gt; Applies source code formatting with the settings in &lt;code&gt;formatter-settings.xml&lt;/code&gt;. If the code is not properly formatted the build server will reject it.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;build&lt;/em&gt; Builds the main artifact (the jar file containing Codyze)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;publishToMavenLocal&lt;/em&gt; (optional) publishes the build artifact to your local Maven repository so it is available as a dependency for other projects&lt;/li&gt;
&lt;li&gt;&lt;em&gt;installDist&lt;/em&gt; Create an executable script for Linux, Mac, and Windows in &lt;code&gt;build/install/codyze/bin&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When everything works, &lt;code&gt;git commit&lt;/code&gt; your changes and &lt;code&gt;git push&lt;/code&gt; them to Github, then create a pull request (PR). Make sure to describe want you intend the code to do and refer to any issues your PR might address (using the notation &lt;code&gt;#123&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;If you&amp;rsquo;re not yet ready for a review, add &amp;ldquo;WIP&amp;rdquo; to the PR name to indicate it&amp;rsquo;s a work in progress.&lt;/li&gt;
&lt;li&gt;Wait for the automated CI workflow to do some checks.&lt;/li&gt;
&lt;li&gt;Continue working on your PR by pushing further commits to your branch until you are satisfied&lt;/li&gt;
&lt;li&gt;When you&amp;rsquo;re ready for a review, add a comment to the PR, and remove any &amp;ldquo;WIP&amp;rdquo; markers.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;code-formatting&#34;&gt;Code formatting&lt;/h2&gt;
&lt;p&gt;Codyze uses the gradle &lt;em&gt;spotless&lt;/em&gt; plugin to format source code. You may import the code style definitions into your favorite IDE to apply it immediately.&lt;/p&gt;
&lt;h3 id=&#34;gradle&#34;&gt;Gradle&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Simply run &lt;code&gt;./gradlew spotlessApply&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;intellij&#34;&gt;IntelliJ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;In IntelliJ, open &lt;em&gt;Settings-&amp;gt;Editor-&amp;gt;Code Style-&amp;gt;Java&lt;/em&gt; and click on the cog icon.&lt;/li&gt;
&lt;li&gt;Choose &lt;em&gt;Import Scheme-&amp;gt;Eclipse XML Profile&lt;/em&gt; and select the file &lt;code&gt;formatter-settings.xml&lt;/code&gt; in the project&amp;rsquo;s root folder.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://www.codyze.io/img/intellij-formatter.png&#34; 
alt=&#34;Import code style formatter into IntelliJ&#34;
class=&#34;mt-3 mb-3 border border-info rounded&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;eclipse&#34;&gt;Eclipse&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;In Eclipse, open &lt;em&gt;Window-&amp;gt;Preferences-&amp;gt;Java-&amp;gt;Code Style-&amp;gt;Formatter&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;Import&lt;/em&gt; and select the file &lt;code&gt;formatter-settings.xml&lt;/code&gt; in the project&amp;rsquo;s root folder.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://www.codyze.io/img/eclipse-formatter.png&#34; 
alt=&#34;Import code style formatter into Eclipse&#34;
class=&#34;mt-3 mb-3 border border-info rounded&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Install Codyze</title>
      <link>https://www.codyze.io/docs/getting-started/installation/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.codyze.io/docs/getting-started/installation/</guid>
      <description>
        
        
        &lt;h2 id=&#34;install-analysis-server&#34;&gt;Install Analysis Server&lt;/h2&gt;
&lt;p&gt;No matter whether you will use an IDE or the console, you first need to install the analysis server.&lt;/p&gt;
&lt;p&gt;Prerequisites&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java 11 or higher&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Download and Install&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download the zipped analysis server from the &lt;a href=&#34;https://github.com/Fraunhofer-AISEC/codyze/releases&#34;&gt;release page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Unzip the file&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;bin\codyze.bat -l&lt;/code&gt; (Windows) or &lt;code&gt;bin/codyze -l&lt;/code&gt; (Mac, Linux) from the unzipped folder to start the analysis server in LSP mode&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;integration-in-eclipse&#34;&gt;Integration in Eclipse&lt;/h2&gt;
&lt;p&gt;Codyze can be installed from an Eclipse update site. It has been tested against Eclipse 2019-04 and later.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In Eclipse, click on &lt;code&gt;Help&lt;/code&gt;-&amp;gt;&lt;code&gt;Install New Software...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Add...&lt;/code&gt; to add a new update site&lt;/li&gt;
&lt;li&gt;Choose a name and enter the location &lt;a href=&#34;https://update.breakpoint-security.com&#34;&gt;https://update.breakpoint-security.com&lt;/a&gt; (note this is an Eclipse update site URL and not suited to open with a web browser)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://www.codyze.io/img/eclipse-update-site.png&#34; 
alt=&#34;Adding Eclipse Update Site&#34;
class=&#34;mt-3 mb-3 border border-info rounded&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Choose and install &lt;code&gt;Codyze Code Analyzer&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://www.codyze.io/img/eclipse-plugin-installation.png&#34; 
alt=&#34;Adding Eclipse Update Site&#34;
class=&#34;mt-3 mb-3 border border-info rounded&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once installed, configure the Eclipse plugin to use the local LSP server:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to &lt;em&gt;Windows-&amp;gt;Preferences-&amp;gt;Codyze Code Analysis&lt;/em&gt; and configure the path to the analysis server binary&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://www.codyze.io/img/eclipse-plugin-2.png&#34; 
alt=&#34;Configuring Eclipse Plugin&#34;
class=&#34;mt-3 mb-3 border border-info rounded&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;If the configuration is correct, &lt;code&gt;.java&lt;/code&gt; and &lt;code&gt;.cpp&lt;/code&gt; files will be automatically scanned when they are saved. Any errors found by Codyze will be highlighted as problems. If Codyze verifies that an API is correctly used, it will create mark the line with a hint.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://www.codyze.io/img/eclipse-plugin-1.png&#34; 
alt=&#34;Configuring Eclipse Plugin&#34;
class=&#34;mt-3 mb-3 border border-info rounded&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;integration-in-intellij&#34;&gt;Integration in IntelliJ&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Download and install the &lt;code&gt;LSP Support&lt;/code&gt; plugin. Restart IntelliJ.&lt;/li&gt;
&lt;li&gt;Goto &lt;code&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Language Server Protocol&lt;/code&gt; -&amp;gt; &lt;code&gt;Server Definitions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add a new server definition of type &lt;code&gt;Executable&lt;/code&gt; for extension &lt;code&gt;java&lt;/code&gt; and navigate to your local &lt;code&gt;/opt/codyze/codyze-1.0.0/bin/codyze&lt;/code&gt; script.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://www.codyze.io/img/lsp-settings-intellij.png&#34; 
alt=&#34;IntelliJ LSP Settings&#34; 
class=&#34;mt-3 mb-3 border border-info rounded&#34;&gt;&lt;/p&gt;
&lt;p&gt;If everything works as intended, you should see a green circle in your IntelliJ status bar, indicating that the connection to the language server was successful.&lt;/p&gt;
&lt;h2 id=&#34;integration-in-visual-studio-2019&#34;&gt;Integration in Visual Studio 2019&lt;/h2&gt;
&lt;p&gt;The Codyze eclipse can be installed from the Visual Studio 2019 Marketplace&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.codyze.io/img/vs-plugin.jpg&#34; 
alt=&#34;Installation from Visual Studio Market&#34; 
class=&#34;mt-3 mb-3 border border-info rounded&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you prefer installing the plugin from the release page, proceed as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download the zipped extension from the &lt;a href=&#34;https://github.com/Fraunhofer-AISEC/codyze-vs-plugin/releases&#34;&gt;release page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Unzip the file&lt;/li&gt;
&lt;li&gt;Double-click the VSIX-file to install the extension&lt;/li&gt;
&lt;li&gt;Launch Visual Studio&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;On startup, the plugin will ask you for the path to Codyze and to the mark files you want to use. If everythings checks out, the plugin will automatically start an instance of Codyze when a solution is opened. It will then scan &lt;code&gt;.cpp&lt;/code&gt; files when opened or saved and highlight potential problems.&lt;/p&gt;
&lt;p&gt;If you later want to adjust the path to Codyze, the mark files or change the command line arguments used for Codyze, in Visual Studio goto &lt;code&gt;Tools&lt;/code&gt; -&amp;gt; &lt;code&gt;Options...&lt;/code&gt; -&amp;gt; &lt;code&gt;Codyze Plugin&lt;/code&gt; -&amp;gt; &lt;code&gt;Codyze Settings&lt;/code&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Using CLI mode</title>
      <link>https://www.codyze.io/docs/getting-started/cli/</link>
      <pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.codyze.io/docs/getting-started/cli/</guid>
      <description>
        
        
        &lt;h2 id=&#34;command-line-mode&#34;&gt;Command line mode&lt;/h2&gt;
&lt;p&gt;When running in command line interface (CLI) mode, Codyze can be used to automatically check a code base against a set of MARK rules. Run &lt;code&gt;codyze&lt;/code&gt; to see the supported command line flags:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;Usage&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;codyze &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;typestate&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;NFA&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;WPDS&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;analyze&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;includes]&lt;/span&gt;
              &lt;span style=&#34;color:#000&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;includes&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;includesPath&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:|&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;includesPath&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;includes&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;includesPath&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:|&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
              &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;includesPath&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;]]...]&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;hV]&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;no&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;good&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;findings]&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;o&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;]&lt;/span&gt;
              &lt;span style=&#34;color:#000&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;timeout&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;minutes&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;Codyze&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;finds&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;security&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;flaws&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;source&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;code&lt;/span&gt;
  &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;source&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;       &lt;span style=&#34;color:#000&#34;&gt;Source&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;folder&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;analyze.&lt;/span&gt;
  &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;mark&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;         &lt;span style=&#34;color:#000&#34;&gt;Load&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;MARK&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;policy&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;files&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;folder&lt;/span&gt;
  &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;o&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;output&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;       &lt;span style=&#34;color:#000&#34;&gt;Write&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;results&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;file.&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Use&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;--&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;stdout.&lt;/span&gt;
      &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;timeout&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;minutes&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;   &lt;span style=&#34;color:#000&#34;&gt;Terminate&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;analysis&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;after&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;timeout&lt;/span&gt;
                              &lt;span style=&#34;color:#000&#34;&gt;Default&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;120&lt;/span&gt;
      &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;no&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;good&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;findings&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;Disable&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;positive&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;findings&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;which&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;indicate&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;correct&lt;/span&gt;
                              &lt;span style=&#34;color:#000&#34;&gt;implementations&lt;/span&gt;
  &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;help&lt;/span&gt;                &lt;span style=&#34;color:#000&#34;&gt;Show&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;help&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;exit.&lt;/span&gt;
  &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;version&lt;/span&gt;             &lt;span style=&#34;color:#000&#34;&gt;Print&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;version&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;information&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;exit.&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;Execution&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;mode&lt;/span&gt;
  &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;                        &lt;span style=&#34;color:#000&#34;&gt;Start&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;command&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;line&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;mode.&lt;/span&gt;
  &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;l&lt;/span&gt;                        &lt;span style=&#34;color:#000&#34;&gt;Start&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;language&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;protocol &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;LSP&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;mode.&lt;/span&gt;
  &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;t&lt;/span&gt;                        &lt;span style=&#34;color:#000&#34;&gt;Start&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;interactive&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;console &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Text&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;based&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Interface&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;.
&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Analysis&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;settings&lt;/span&gt;
      &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;typestate&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;NFA&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;WPDS&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
                            &lt;span style=&#34;color:#000&#34;&gt;Typestate&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;analysis&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;mode&lt;/span&gt;
                            &lt;span style=&#34;color:#000&#34;&gt;NFA&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt;  &lt;span style=&#34;color:#000&#34;&gt;Non&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;deterministic&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;finite&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;automaton &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;faster&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;intraprocedural&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
                            &lt;span style=&#34;color:#000&#34;&gt;WPDS&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Weighted&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;pushdown&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;system &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;slower&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;interprocedural&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;Translation&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;settings&lt;/span&gt;
      &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;analyze&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;includes&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;Enables&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;parsing&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;files.&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;By&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;includes&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;are&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;given&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
                              &lt;span style=&#34;color:#000&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;parser&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;will&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;resolve&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;symbols&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;templates&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;these&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;include&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;but&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;not&lt;/span&gt;
                              &lt;span style=&#34;color:#000&#34;&gt;load&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;their&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;parse&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;tree.&lt;/span&gt;
      &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;includes&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;includesPath&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:|&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;includesPath&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;]&lt;/span&gt;
                            &lt;span style=&#34;color:#000&#34;&gt;Path&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;containing&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;files.&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Path&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;must&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;be&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;separated&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;by&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt;
                              &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Mac&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Linux&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Windows&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;-c&lt;/code&gt; enters command line mode. It will parse all files given by the &lt;code&gt;-s&lt;/code&gt; argument, analyze them against the MARK policies given by &lt;code&gt;-m&lt;/code&gt;, and write the findings in JSON format to the file given by &lt;code&gt;-o&lt;/code&gt;. If &lt;code&gt;--&lt;/code&gt; is given as the output name, the results will be dumped to stdout.&lt;/p&gt;
&lt;p&gt;Note that line numbers of findings in JSON output start by 0 and are thus off by one compared to the &lt;code&gt;server.show_findings()&lt;/code&gt; command in the interactive console.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MARK Entities</title>
      <link>https://www.codyze.io/docs/mark-authors/define-entities/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.codyze.io/docs/mark-authors/define-entities/</guid>
      <description>
        
        
        &lt;p&gt;MARK rules refer to &lt;em&gt;entities&lt;/em&gt; - abstract objects that wrap the real object classes of the analyzed programming language (in case of object oriented languages) and group methods with similar semantics in so-called _op_s. A MARK entity defines three parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A &lt;em&gt;name&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;A set of &lt;em&gt;ops&lt;/em&gt; (operations)&lt;/li&gt;
&lt;li&gt;A set of MARK &lt;em&gt;variables&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Writing MARK rules for a cryptographic library requires a good understanding of the library API and its class hierarchy. We recommend the following approach to writing MARK entities.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Model relevant classes as MARK entities&lt;/li&gt;
&lt;li&gt;Define _op_s and variables&lt;/li&gt;
&lt;li&gt;(Optionally) blacklist some _op_s&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;model-relevant-classes-as-mark-entities&#34;&gt;Model relevant classes as MARK entities&lt;/h2&gt;
&lt;p&gt;It is certainly not necessary to model all classes of the software library as MARK entities. Rather, you need to identify those classes which hold cryptographic relevant data or provide cryptographic functions. Although in many cases, several classes of the programming language can be summarized in one abstract MARK entity, it might be easier to directly map classes to entities in the first iteration.&lt;/p&gt;
&lt;p&gt;The name of an entity can be freely chosen. If it refers to a specific class in the programming language, though, it might make sense to name them accordingly.&lt;/p&gt;
&lt;h2 id=&#34;define-ops-and-variables&#34;&gt;Define Ops and variables&lt;/h2&gt;
&lt;p&gt;The next step is to define _op_s. An &lt;em&gt;op&lt;/em&gt; is a group of semantically equal or similar functions, methods, or constructors, given as fully qualified signatures. Especially overloaded functions with the same name but different parameters are candidates for being grouped in an &lt;em&gt;op&lt;/em&gt;. For cryptographic libraries, typical _op_s are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;instantiate&lt;/code&gt; - a group of functions for instantiating a class or creating an object of a class&lt;/li&gt;
&lt;li&gt;&lt;code&gt;initialize&lt;/code&gt; - a group of functions that initialize a cryptographic algorithms, e.g. by setting a key or initialization vector.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update&lt;/code&gt; - a group of functions that process further data by a cryptographic algorithm&lt;/li&gt;
&lt;li&gt;&lt;code&gt;finalize&lt;/code&gt;- a group of functions that terminate a cryptographic algorithm&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reset&lt;/code&gt;- a group of functions that reset a cryptographic algorithm and make it ready for further processing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The name of an &lt;em&gt;op&lt;/em&gt; can be freely chosen. When specifying fully qualified function or method signatures in an &lt;em&gt;op&lt;/em&gt;, parameters are typed and can be &lt;em&gt;unnamed&lt;/em&gt; or &lt;em&gt;named&lt;/em&gt;. Unnamed parameters are indicated by the name &amp;ldquo;_&amp;rdquo; and do not play any role in the definition of rules. Named parameters refer to MARK variables and can be used when writing rules. We recommend to name only those parameters which are required in rules, as named parameters will increase the memory cost and runtime of the analysis.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; The following &lt;code&gt;op&lt;/code&gt; &lt;em&gt;instantiate&lt;/em&gt; refers to only a single Java method, called &lt;code&gt;de.example.Crypto.getInstance&lt;/code&gt;. Neither the return type, nor modifiers such as &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;static&lt;/code&gt;, &lt;code&gt;final&lt;/code&gt; etc. are given in MARK. The method signature contains one named parameter of type &lt;code&gt;java.lang.String&lt;/code&gt; and one unnamed parameter without type restriction. Note that the name of the parameter does not relate to the parameter name in the programming language, but rather to a MARK variable.&lt;/p&gt;
&lt;pre&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;op&lt;/span&gt; instantiate {
  de.example.Crypto.getInstance(
    algorithm : java.lang.String,    // Named typed parameter
    _                                // Unnamed untyped parameter
  );
}
&lt;/pre&gt;
&lt;p&gt;So, this MARK &lt;code&gt;op&lt;/code&gt; would include the following methods of a class &lt;code&gt;de.example.Crypto&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public static Crypto getInstance(String x, String y)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private void getInstance(String x, byte y)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It would however &lt;em&gt;not&lt;/em&gt; include a method &lt;code&gt;void getInstance(String x)&lt;/code&gt; (wrong number of parameters) or &lt;code&gt;getInstance(byte x, String y)&lt;/code&gt; (wrong type of 1st parameter).&lt;/p&gt;
&lt;p&gt;To make use of named parameters, they must additionally be declared as entity variables using the &lt;code&gt;var&lt;/code&gt; keyword:&lt;/p&gt;
&lt;pre&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;entity&lt;/span&gt; Crypto {

  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; algorithm;  // this makes parameter &#34;algorithm&#34; available when writing rules.

  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;op&lt;/span&gt; instantiate {
    de.example.Crypto.getInstance(
      algorithm : java.lang.String,    // Named typed parameter
      _                                // Unnamed untyped parameter
    );
  }
}
&lt;/pre&gt;
&lt;h2 id=&#34;optionally-blacklist-some-_ops_s&#34;&gt;(Optionally) blacklist some _ops_s&lt;/h2&gt;
&lt;p&gt;In some cases, groups of functions or methods should not be used at all by a program. This applies e.g. to deprecated functions or functions that are known to be insecure. MARK provides a shortcut to mark any use of such functions as insecure: the &lt;code&gt;forbidden&lt;/code&gt; keyword.&lt;/p&gt;
&lt;pre&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;entity&lt;/span&gt; Crypto {

  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;op&lt;/span&gt; instantiate {
    de.example.Crypto.getInstance(
      algorithm : java.lang.String,    // Named typed parameter
      _                                // Unnamed untyped parameter
    );
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;forbidden&lt;/span&gt; de.example.Crypto.getInstanceDeprecated();  // Any use of this function will be flagged
  }
}
&lt;/pre&gt;
&lt;p&gt;Any occurrence of &lt;code&gt;getInstanceDeprecated()&lt;/code&gt; in the program will be marked as insecure, without further evaluation of rules. This is not only a shortcut, removing the need to write separate rules, but also a way to cut down analysis time, as Codyze does not need to find instances of the entity, but will rather indicate the error immediately when it sees a usage of the method.&lt;/p&gt;
&lt;h2 id=&#34;complete-example&#34;&gt;Complete Example&lt;/h2&gt;
&lt;pre&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;entity&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;org.bouncycastle.crypto.digests.SHA512Digest&lt;/span&gt; 
           &lt;span style=&#34;color:#c4a000&#34;&gt;isa org.bouncycastle.crypto.Digest&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
  
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; instance : org.bouncycastle.crypto.digests.SHA512Digest; // Alternative for `this`
  
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; encodedState : byte[];
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; copy : org.bouncycastle.crypto.digests.SHA512Digest;
  
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; inByte : byte;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; inByteArray : byte[];
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; inByteArrayOff : int;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; inByteArraylen : int;
  
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; outArray : byte[];
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; outArrayOff : int;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; resultLen : int;
  
  
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;op&lt;/span&gt; instantiate &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
        this = org.bouncycastle.crypto.digests.SHA512Digest();
        this = org.bouncycastle.crypto.digests.SHA512Digest(encodedState);
        instance = org.bouncycastle.crypto.digests.SHA512Digest(copy);
    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
  
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;op&lt;/span&gt; update &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
    org.bouncycastle.crypto.digests.SHA512Digest.update(inByte);
    org.bouncycastle.crypto.digests.SHA512Digest.update(inByteArray, inByteArrayOff, inByteArrayLen);
  &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
  
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;op&lt;/span&gt; finish &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
    org.bouncycastle.crypto.digests.SHA512Digest.finish();
  &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
  
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;op&lt;/span&gt; finalize &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
    resultLen = org.bouncycastle.crypto.digests.SHA512Digest.doFinal(outArray, outArrayOff);
  &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
  
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;op&lt;/span&gt; reset &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
    org.bouncycastle.crypto.digests.SHA512Digest.reset();
    org.bouncycastle.crypto.digests.SHA512Digest.reset(_);
  &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
  
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;blockquote&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Using the Codyze Console</title>
      <link>https://www.codyze.io/docs/getting-started/console/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.codyze.io/docs/getting-started/console/</guid>
      <description>
        
        
        &lt;h2 id=&#34;starting-in-console-mode&#34;&gt;Starting in Console Mode&lt;/h2&gt;
&lt;p&gt;When starting Codyze with the &lt;code&gt;-t&lt;/code&gt; option, it will start an interactive Python console that you can use to explore your source code projects.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;codyze&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;t&lt;/span&gt;

      ██████╗ ██████╗ ██████╗ ██╗   ██╗███████╗███████╗
     ██╔════╝██╔═══██╗██╔══██╗╚██╗ ██╔╝╚══███╔╝██╔════╝
     ██║     ██║   ██║██║  ██║ ╚████╔╝   ███╔╝ █████╗  
     ██║     ██║   ██║██║  ██║  ╚██╔╝   ███╔╝  ██╔══╝  
     ╚██████╗╚██████╔╝██████╔╝   ██║   ███████╗███████╗
      ╚═════╝ ╚═════╝ ╚═════╝    ╚═╝   ╚══════╝╚══════╝
     
                     &lt;span style=&#34;color:#000&#34;&gt;Welcome&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Codyze&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!&lt;/span&gt;
                &lt;span style=&#34;color:#000&#34;&gt;To&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;get&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;help&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;enter&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;help()&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The console is a standard python console and offers a few extra commands to load, analyze, and explore source code with Codyze. It supports the following standard keyboard shortcuts:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Object&lt;/th&gt;
&lt;th&gt;Shorthand&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;C&lt;/kbd&gt; or &lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;D&lt;/kbd&gt;&lt;/td&gt;
&lt;td&gt;Leaves the console&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;kbd&gt;UP&lt;/kbd&gt;, &lt;kbd&gt;DOWN&lt;/kbd&gt;&lt;/td&gt;
&lt;td&gt;Navigate backand forth in command history&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;R&lt;/kbd&gt;&lt;/td&gt;
&lt;td&gt;Search in command history&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;kbd&gt;ALT&lt;/kbd&gt;+&lt;kbd&gt;B&lt;/kbd&gt;&lt;/td&gt;
&lt;td&gt;Go back one word&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;kbd&gt;ALT&lt;/kbd&gt;+&lt;kbd&gt;F&lt;/kbd&gt;&lt;/td&gt;
&lt;td&gt;Go forth one word&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;To run any Python snippet, simply enter it at the command prompt:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;Hello world&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;Hello&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;world&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To interact with Codyze, the console provides three main objects: &lt;code&gt;server&lt;/code&gt;, &lt;code&gt;query&lt;/code&gt; and &lt;code&gt;graph&lt;/code&gt;. Each object has a shorthand notation that is an alias to save a few keystrokes, so instead of &lt;code&gt;server&lt;/code&gt; you may simply type &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Object&lt;/th&gt;
&lt;th&gt;Shorthand&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;server&lt;/td&gt;
&lt;td&gt;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;query&lt;/td&gt;
&lt;td&gt;q&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;graph&lt;/td&gt;
&lt;td&gt;g&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;server&#34;&gt;&lt;code&gt;server&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;server&lt;/code&gt; object controls the Codyze analysis server. Use it to load source code projects, MARK files, and start the analysis.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.analyze(path)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Starts the analysis for the given folder or source file.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.show_findings()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;List all findings, including correct and incorrect uses of cryptography. Make sure to call &lt;code&gt;analyze&lt;/code&gt; before. Note that the line numbers displayed by &lt;code&gt;show_findings()&lt;/code&gt; start counting at 1, as your editor does.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.list_rules()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;List all MARK rules which are currently active.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.load_rules(path)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Load additional MARK rules from the given folder or file. Make sure to load rules before calling &lt;code&gt;analyze&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;query&#34;&gt;&lt;code&gt;query&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;query&lt;/code&gt; object provides access to the Crymlin query interface. Crymlin is an extension of the Apache Gremlin graph traversal language and comes with various shortcuts for exploring code property graphs. To get a first impression of Crymlin, consider the following snippet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;q&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;methods&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
     &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
     &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;toList&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;myMethod&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;someOtherMethod&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This snippet uses the query object &lt;code&gt;q&lt;/code&gt; to get all methods (in all files and all classes) from the graph, retrieves their names (&lt;code&gt;name&lt;/code&gt;) and collect them in a list (&lt;code&gt;toList&lt;/code&gt;).&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MARK Rules</title>
      <link>https://www.codyze.io/docs/mark-authors/mark-authors/</link>
      <pubDate>Wed, 05 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.codyze.io/docs/mark-authors/mark-authors/</guid>
      <description>
        
        
        &lt;p&gt;Once the core functions of a cryptographic library have been modeled as MARK entities, you can start writing rules. MARK rules operate over instances of entities and define conditions which must apply to these instances. A MARK &amp;ldquo;instance&amp;rdquo; may correspond to an actual object in the program, but in the case of non-object oriented languages or static methods, it may simply be an abstract set of function calls and variables.&lt;/p&gt;
&lt;h3 id=&#34;basic-rule-structure&#34;&gt;Basic rule structure&lt;/h3&gt;
&lt;p&gt;MARK rules are structured as follows:&lt;/p&gt;
&lt;pre&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;rule&lt;/span&gt; MyRule {
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;using&lt;/span&gt;
    // instances go here
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;ensure&lt;/span&gt;
    // conditions go here
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;onfail&lt;/span&gt;
    // error message goes here
}
&lt;/pre&gt;
&lt;p&gt;Each rule has a name which must be unique across along all MARK files loaded into Codyze. The &lt;code&gt;using&lt;/code&gt; keyword starts the declaration of instances of MARK entities and the &lt;code&gt;ensure&lt;/code&gt; keyword starts the actual condition. If Codyze finds a violation of the condition in the program, it will issue a finding with the message indicated by the &lt;code&gt;onfail&lt;/code&gt; identifier.&lt;/p&gt;
&lt;p&gt;To illustrate the process of writing MARK rules, let us assume we want to ensure that the MARK entity &lt;code&gt;Crypto&lt;/code&gt; from the previous section uses either of the two cryptographic algorithms &lt;code&gt;Algo1&lt;/code&gt; or &lt;code&gt;Algo2&lt;/code&gt; and that the algorithm is initiated with a parameter which is longer than 16 bytes.&lt;/p&gt;
&lt;pre&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;rule&lt;/span&gt; ID_2 {
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;using&lt;/span&gt;
    Crypto &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;as&lt;/span&gt; c,                   // instance c of MARK entity Crypto
    CryptoParameter &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;as&lt;/span&gt; cp          // instance cp of MARK entity CryptoParameter
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;ensure&lt;/span&gt;
    _is(c.param, cp)               // variable c.param == cp
    &amp;&amp; _length(cp.rawData) &gt;= 16   // byte length of cp.rawData &gt;= 16
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;onfail&lt;/span&gt;
  // todo
}
&lt;/pre&gt;
&lt;h3 id=&#34;preconditions&#34;&gt;Preconditions&lt;/h3&gt;
&lt;p&gt;Some rules only apply if certain preconditions are fulfiled, i.e. such preconditions will be evaluated before the actual condition. If they fail, the main condition will not be evaluated and the rule will not return any result (i.e. it will neither confirm a valid program nor flag a wrong program). Preconditions follow the same syntax as the main condition, but are declared by the &lt;code&gt;when&lt;/code&gt; keyword.&lt;/p&gt;
&lt;pre&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;rule&lt;/span&gt; ID_2 {
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;using&lt;/span&gt;
    Crypto &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;as&lt;/span&gt; c,                   // instance c of MARK entity Crypto
    CryptoParameter &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;as&lt;/span&gt; cp          // instance cp of MARK entity CryptoParameter
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;when&lt;/span&gt;
    c.algorithm == &#34;Algo1&#34;         // rule is only relevant for &#34;Algo1&#34;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;ensure&lt;/span&gt;
    _is(c.param, cp)               // variable c.param == cp
    &amp;&amp; _length(cp.rawData) &gt;= 16   // byte length of cp.rawData &gt;= 16
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;onfail&lt;/span&gt;
  // todo
}
&lt;/pre&gt;
&lt;h3 id=&#34;built-in-predicates&#34;&gt;Built-in Predicates&lt;/h3&gt;
&lt;p&gt;MARK comes with a number of built in functions that can be used as predicates in conditions and preconditions. These built-ins are called when MARK rules are evaluated and operate over their input arguments (typically MARK objects or constants) and the current evaluation context. By convention, built-ins should start with an underscore (&lt;code&gt;_&lt;/code&gt;). When a built-in fails, it will return an &lt;code&gt;Error&lt;/code&gt; object that always evaluates to &lt;em&gt;not applicable&lt;/em&gt;, i.e. neither true nor false.&lt;/p&gt;
&lt;h4 id=&#34;_has_value&#34;&gt;_has_value&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Function:&lt;/strong&gt; &lt;code&gt;__has_value(a,b)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ensure
     __has_value(a, b)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if MARK object &lt;code&gt;a&lt;/code&gt; may be assigned value &lt;code&gt;b&lt;/code&gt; (e.g., a constant).&lt;/p&gt;
&lt;h4 id=&#34;_inside_same_function&#34;&gt;_inside_same_function&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Function:&lt;/strong&gt; &lt;code&gt;__inside_same_function(a,b)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ensure
     __inside_same_function(a, b)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if MARK objects &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; reside in the same function.&lt;/p&gt;
&lt;h4 id=&#34;_is&#34;&gt;_is&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Function:&lt;/strong&gt; &lt;code&gt;_is(a,b)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ensure
     _is(a, b)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if MARK object &lt;code&gt;a&lt;/code&gt; is equal to variable &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;_split&#34;&gt;_split&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Function:&lt;/strong&gt; &lt;code&gt;_split(String str, String splitter, int position)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;  TODO&lt;/p&gt;
&lt;p&gt;Behaves like the Java expression &lt;code&gt;String.split(String splitter)[position]&lt;/code&gt;. That is, it splits the string &lt;code&gt;str&lt;/code&gt; at all occurrences of &lt;code&gt;splitter&lt;/code&gt; and returns the &lt;code&gt;position&lt;/code&gt;th substring. Returns an &lt;code&gt;Error&lt;/code&gt; if no such occurrence is found.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
